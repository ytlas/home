* Init
#+BEGIN_SRC emacs-lisp
;; Put auto-generated code in custom.el.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Style
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil :font "10x20")
(set-face-attribute 'default nil :font "-Misc-Fixed-Medium-R-Normal--18-120-100-100-C-90-ISO10646-1")
;; (add-to-list 'default-frame-alist '(foreground-color . "#ffffff"))
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Install use-package if not already done.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
(use-package try :ensure t)
(use-package which-key :ensure t
  :config (which-key-mode))
(use-package expand-region :ensure t)
(use-package web-mode :ensure t)
(use-package flycheck :ensure t)
(use-package flymake-php :ensure t
  :config (add-hook 'web-mode-hook 'flymake-php-load))
(use-package yasnippet :ensure t)
(use-package company :ensure t)
(use-package folding :ensure t)
(use-package ivy :ensure t
  :config (ivy-mode 1))
(use-package org-bullets :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(use-package helm :ensure t)
(use-package projectile :ensure t
  :config (projectile-mode 1))
(use-package system-packages
  :ensure t)
(use-package tex
  :ensure auctex)
(use-package magit
  :ensure t)
(use-package counsel-projectile :ensure t
  :config (counsel-projectile-on))
(use-package fill-column-indicatior :ensure t)
#+END_SRC

* Modes
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
;(display-battery-mode 1)
(column-number-mode 1)
(menu-bar-mode 0)
(subword-mode 1)
(fringe-mode 8)
(show-paren-mode 1)
(display-time-mode 1)
#+END_SRC

* Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-flycheck-mode)
(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ejs\\'"  . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'"  . css-mode))
#+END_SRC

* Variables
#+BEGIN_SRC emacs-lisp
;; Set column-limit
(setq-default fill-column 80)

;; Store backup files in /tmp
(setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))

;; C-mode
(setq-default c-basic-offset 4
			  tab-width 4
			  indent-tabs-mode t)

;; Disable lock-files
(setq create-lockfiles nil)

;; Disables Emacs welcome screen
(setq inhibit-startup-message t)

;; Replaces yes-or-no prompts with y-or-n prompts
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Keybinds
#+BEGIN_SRC emacs-lisp
;; Helm
;; (global-set-key (kbd "M-x") 'helm-M-x)
;; (global-set-key (kbd "C-x b") 'helm-buffers-list)
;; (global-set-key (kbd "C-x C-f") 'helm-find-files)

;; Magit
(global-set-key (kbd "C-x g") 'magit-status)

(windmove-default-keybindings)
;; Navigation
(global-set-key (kbd "€") 'er/expand-region)

;;; Key unbindings
(global-unset-key (kbd "C-z"))

;; Shell
(global-set-key (kbd "þ") (lambda() (interactive) (eshell t)))

;; Toggle fold
(global-set-key (kbd "đ") 'folding-toggle-show-hide)

;; Comment binds
(global-set-key (kbd "©") 'comment-region)
(global-set-key (kbd "C-©") 'uncomment-region)
#+END_SRC
