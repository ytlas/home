* Init
#+BEGIN_SRC emacs-lisp
;; Put auto-generated code in custom.el.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Install use-package if not already done.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t
  :config (which-key-mode))
(use-package expand-region :ensure t)
(use-package web-mode :ensure t)
(use-package php-mode :ensure t)
(use-package ivy :ensure t
  :config (ivy-mode 1))
(use-package swiper :ensure t)
(use-package tex
  :ensure auctex)
(use-package find-file-in-project :ensure t)
(use-package yasnippet :ensure t)
#+END_SRC

* Modes
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
;(display-battery-mode 1)
(column-number-mode 1)
(menu-bar-mode 0)
(subword-mode 1)
(fringe-mode 8)
(show-paren-mode 1)
(display-time-mode 1)
(yas-global-mode 1)
#+END_SRC

* Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
#+END_SRC

* Variables
#+BEGIN_SRC emacs-lisp
;; Yasnippet
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))

;; Syntax highlight org code blocks
(setq org-src-fontify-natively t)

;; Line spacing
(setq-default line-spacing 4)

;; Pop confirm dialog when exiting Emacs
(setq confirm-kill-emacs 'y-or-n-p)

;; Set column-limit
(setq-default fill-column 80)

;; Store backup files in /tmp
(setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))

;; C-mode
(setq-default c-basic-offset 4
			  tab-width 4
			  indent-tabs-mode t)

;; Disable lock-files
(setq create-lockfiles nil)

;; Disables Emacs welcome screen
(setq inhibit-startup-message t)

;; Replaces yes-or-no prompts with y-or-n prompts
(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC
* Keybinds
#+BEGIN_SRC emacs-lisp
;; Swiper
(global-set-key (kbd "C-s") 'swiper)

;; Magit
(global-set-key (kbd "C-x g") 'magit-status)

(windmove-default-keybindings)
;; Navigation
;(global-set-key (kbd "€") 'er/expand-region)

;;; Key unbindings
(global-unset-key (kbd "C-z"))

;; Shell
;(global-set-key (kbd "þ") (lambda() (interactive) (eshell t)))

;; Comment binds
;(global-set-key (kbd "©") 'comment-region)
;(global-set-key (kbd "C-©") 'uncomment-region)

;; Projects
(global-set-key (kbd "C-c p f") 'find-file-in-project)
(global-set-key (kbd "C-c p s g") 'projectile-grep)

;; Scroll-up and down
(global-set-key (kbd "C-v") (lambda() (interactive) (scroll-up-command) (recenter)))
(global-set-key (kbd "M-v") (lambda() (interactive) (scroll-down-command) (recenter)))
#+END_SRC
